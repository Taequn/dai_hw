plotResiduals(model1)
plotResiduals<-function(mod){
ggdat <- data.frame(y.hat = fitted(mod),
e = residuals(mod))
########################################
####  Fitted versus residuals
########################################
p1<-ggplot(data=ggdat,aes(x=y.hat,y=e))+
geom_point(shape=1)+
geom_hline(yintercept=0,linetype="dashed")+
theme_bw()+
xlab(bquote(hat(Y)))+
ylab("Residuals")+
ggtitle("Fitted Values versus the Residuals")
########################################
####  Histogram with Gaussian Density
########################################
ggdat.gaussian<-data.frame(x=seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
f=dnorm(seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
#ei should have mean zero
mean=0,
#ei should have common variance
sd=summary(mod)$sigma),
CDF=pnorm(seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
#ei should have mean zero
mean=0,
#ei should have common variance
sd=summary(mod)$sigma))
d<-density(ggdat$e)
p2<-ggplot(data=ggdat,aes(x=e))+
geom_histogram(aes(y=..density..), binwidth = d$bw,
fill="lightblue",color="black")+
geom_density(aes(color="Empirical"),size=1,
trim=F,show.legend = F)+
geom_line(data=ggdat.gaussian,aes(x=x,y=f,color="Gaussian-Assumed"),
size=1)+
theme_bw()+
xlab("Residual")+
ylab("Density")+
labs(color = "")+
theme(legend.position="bottom")+
ggtitle("Residual Density")
########################################
####  Plot the residuals ecdf
########################################
e.cdf.func<-ecdf(ggdat$e)
e.cdf<-e.cdf.func(sort(ggdat$e))
ggdat<-ggdat %>% mutate(e.sort=sort(ggdat$e),
e.cdf=e.cdf)
p3<-ggplot(data=ggdat,aes(x=e.sort))+
geom_line(data=ggdat.gaussian,aes(x=x,y=CDF,color="Gaussian-Assumed"),size=1)+
geom_step(aes(y=e.cdf,color="Empirical"),show.legend = F,size=1)+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Residual")+
ylab("Cumulative Density")+
labs(color = "")+
theme(legend.position="bottom")+
ggtitle("Residual Cumulative Density")
########################################
####  QQplot of the residuals
########################################
library("qqplotr")
p4<-ggplot(data=ggdat,aes(sample=scale(e)))+ #standardize e
stat_qq_band(alpha=0.25) +
stat_qq_line() +
stat_qq_point() +
theme_bw()+
xlab("Gaussian Quantiles")+
ylab("Sample Quantiles")+
ggtitle("Normal Quantile-Quantile Plot of Residuals")
########################################
####  Print
########################################
(p1|p4)/(p2|p3)
}
plotResiduals(model1)
library(patchwork)
plotResiduals(model1)
x4<-x[order(x)]
e<-rnorm(n=n,mean=0,sd=c(rep(1,n/2),rep(3,n/2)))
y4<-5*x4 + 3 + e
ggdat<-data.frame(x=x4, y=y4)
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="blue",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
model3 <- lm(y4~x4)
plotResiduals(model3)
library(tidyverse)
set.seed(7272)
n<-50
ggdat <- data.frame(x=sample(x=seq(0,100,0.01),size=n,replace=TRUE)) %>%
mutate(y=3.5+2.1*x+rnorm(n=n,mean=0,sd=5))
#hat(Y)=hat(B{0})+hat(B){1}{x}
four.model<-lm(y~x, data=ggdat)
summary(four.model)
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="black",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
ggdat <- rbind(ggdat,     # original data
c(100,25)) # bad observation
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="black",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
four.model<-lm(y~x, data=ggdat)
summary(four.model)
?rbind
library(tidyverse)
set.seed(7272)
n<-50
ggdat <- data.frame(x=sample(x=seq(0,100,0.01),size=n,replace=TRUE)) %>%
mutate(y=3.5+2.1*x+rnorm(n=n,mean=0,sd=5))
#hat(Y)=hat(B{0})+hat(B){1}{x}
four.model<-lm(y~x, data=ggdat)
summary(four.model)
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="black",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
len(ggdat)
length(ggdat)
nrow(ggdat)
ggdat <- rbind(ggdat,     # original data
c(100,25)) # bad observation
nrow(ggdat)
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="blue",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
geom_smooth()
?geom_smooth
library(tidyverse)
library(patchwork)
library(GGally)
###########################################################
# Load Data
###########################################################
data.mfap4 <- read_csv("https://cipolli.com/students/data/biomarker.csv")%>%
rename(MFAP4=`MFAP4 U/mL`)%>%
mutate(FS = case_when(`Fibrosis Stage` == 0 ~ "Stage 0",
`Fibrosis Stage` == 1 ~ "Stage 1",
`Fibrosis Stage` == 2 ~ "Stage 2",
`Fibrosis Stage` == 3 ~ "Stage 3",
`Fibrosis Stage` == 4 ~ "Stage 4",
TRUE ~ NA_character_)) %>%
mutate(FS = factor(FS),
Gender=factor(Gender),
lMFAP4 = log(MFAP4)) %>%
dplyr::select("Year of Birth","Gender","FS", "MFAP4", "lMFAP4")
###########################################################
# Plot Data
###########################################################
ggpairs(data.mfap4)
# We see a slight association with Gender -- female higher than male
# There is a slight association with age -- younger and lower MFAP4
# There's a clear association with fibrosis stage
# MFAP4 data is right skewed
###########################################################
# Fit models
###########################################################
###########################################################
# One Categorical: MFAP4 ~ FS
###########################################################
mod1 <- lm(MFAP4 ~ FS, data=data.mfap4)
summary(mod1)
# mfap4 = 9.2 + 1.3*(FS=1) + 3.154(FS=2) + 11.74(FS=3) + 15.39(FS=4) + e
# FS=0 --> 9.2 MFAP4
summary(aov(MFAP4 ~ FS, data=data.mfap4)) # F test is same as ANOVA
plotResiduals(mod1) #!! Assumptions aren't met!
# Suggested Tukey model
library(rcompanion)
# takes the response as input (must be >0)
transform<-transformTukey(data.mfap4$MFAP4)  # suggests fitting y^(-0.25) NONSENSE!
# Suggested Boxcox model
library(MASS)
transform<-boxcox(mod1) # suggests fitting (y^(-.19)-1)/(.19) NONSENSE!
transform$x[which.max(transform$y)] #corresponds to maximum likelihood in plot
# We would use the following model
# Note we use the log() transformation hoping that it's "close enough"
# because it retains interpretations
mod1b <- lm(lMFAP4 ~ FS, data=data.mfap4)
summary(mod1b)
plotResiduals(mod1b) # much better!
plotInfluence(mod1b) # no HUGE outliers/leverage points
# Model:
#log(MFAP4) = 2.0257 + .13(FS=1) + .30(FS=2) + .77(FS=3) + .99*(FS=4) + e
# the intercept represents predicted log(MFAP4) at FS=0
# the other coefficients are the "adjustments" for later stages
# we see that the adjustment increases as the fibrosis stage does
# NOTE: the adjustment for stage 1 is not significant (not different from stage 0)
#       the rest are significant (different from stage 0)
###########################################################
# One Continuous:  MFAP4 ~ `Year of Birth`
###########################################################
mod2 <- lm(MFAP4 ~ `Year of Birth`, data=data.mfap4)
summary(mod2)
plotResiduals(mod2)#!! Assumptions aren't met!
# Suggested Tukey model
library(rcompanion)
# takes the response as input (must be >0)
transform<-transformTukey(data.mfap4$MFAP4)  # suggests fitting y^(-0.25) NONSENSE!
# Suggested Boxcox model
library(MASS)
transform<-boxcox(mod2) # suggests fitting (y^(-.26)-1)/(.26) NONSENSE!
transform$x[which.max(transform$y)] #corresponds to maximum likelihood in plot
# We would use the following model
# Note we use the log() transformation hoping that it's "close enough"
# because it retains interpretations
mod2b <- lm(lMFAP4 ~ `Year of Birth`, data=data.mfap4)
summary(mod2b)
plotResiduals(mod2b) # much better!
plotInfluence(mod2b) # no HUGE outliers/leverage points
# Model:
#log(MFAP4) = 44.15 - 0.02137 + e
# the intercept represents predicted log(MFAP4) at year of birth=0 (NONSENSE!)
# NOTE: the coefficient for year of birth is significant
#       for each year increase in year of birth (subject is younger)
#       the log MFAP4 decreases by -0.02137, on average
# NOTE: this corresponds to a (exp(-0.02137)-1)= -0.0211% change
#       in MFAP4 for each year increase in year of birth
# The intercept is much larger than any observed log MFAP4
# This is because the year of birth observation is so large
data.mfap4 <- data.mfap4 %>%
mutate(yob2 = `Year of Birth`- mean(`Year of Birth`))
mod2c <- lm(lMFAP4 ~ yob2, data=data.mfap4)
# This model has the same interpretation (the coefficient estimate is the same)
# This time, the intercept is more reasonable -- it's the expected
# log(MFAP4) when yob2=0 (when the year of birth is 1955.28, the average)
##########################################################
# Inteaction: MFAP4 ~ FS*`Year of Birth`
mod3 <- lm(MFAP4 ~ yob2*FS, data=data.mfap4)
summary(mod3)
plotResiduals(mod3)#!! Assumptions aren't met!
# Suggested Tukey model
library(rcompanion)
# takes the response as input (must be >0)
transform<-transformTukey(data.mfap4$MFAP4)  # suggests fitting y^(-0.25) NONSENSE!
# Suggested Boxcox model
library(MASS)
transform<-boxcox(mod3) # suggests fitting (y^(-.22)-1)/(.22) NONSENSE!
transform$x[which.max(transform$y)] #corresponds to maximum likelihood in plot
# We would use the following model
# Note we use the log() transformation hoping that it's "close enough"
# because it retains interpretations
mod3b <- lm(lMFAP4 ~ yob2*FS, data=data.mfap4)
summary(mod3b)
plotResiduals(mod3b) # much better!
plotInfluence(mod3b) # no HUGE outliers/leverage points
# This model has a significant effect for year of birth, several fibrosis
# stages, and the interactions. We'll have to learn how to untangle the
# interpretations. However, because FS is categorical we can simplify
# Stage0: lMFAP4 = 2.179 - 0.026(yob2) + e
# Stage1: lMFAP4 = (2.179+0.047) + (0.013-0.026)*(yob2) + e
# Stage2: lMFAP4 = (2.179+0.138) + (0.014-0.026)*(yob2) + e
# Stage3: lMFAP4 = (2.179+0.479) + (0.006-0.026)*(yob2) + e
# Stage4: lMFAP4 = (2.179+0.869) + (0.029-0.026)*(yob2) + e
# approximately
ggdat <- data.frame(x=seq(-40,40,length.out=500)) %>% # values of yob2 to check
mutate(`Stage 0`=2.179 - 0.026*x,
`Stage 1`=(2.179+0.047) + (0.013-0.026)*x,
`Stage 2`=(2.179+0.138) + (0.014-0.026)*x,
`Stage 3`=(2.179+0.479) + (0.006-0.026)*x,
`Stage 4`=(2.179+0.869) + (0.029-0.026)*x) %>%
mutate(yob = x + mean(data.mfap4$`Year of Birth`)) %>% # uncenter
pivot_longer(cols=starts_with("Stage"),
names_to="Stage",
values_to="Pred")
ggplot(data=ggdat, aes(x=yob, y=Pred))+
geom_line(aes(color=Stage))+
theme_bw()+
xlab("Year of Birth")
ggplot(data=ggdat, aes(x=yob, y=Pred))+
geom_line(aes(color=Stage))+
theme_bw()+
xlab("Year of Birth")
# We would use the following model
# Note we use the log() transformation hoping that it's "close enough"
# because it retains interpretations
mod3b <- lm(lMFAP4 ~ yob2*FS, data=data.mfap4)
summary(mod3b)
library(tidyverse)
set.seed(7272)
n<-50
ggdat <- data.frame(x=sample(x=seq(0,100,0.01),size=n,replace=TRUE)) %>%
mutate(y=3.5+2.1*x+rnorm(n=n,mean=0,sd=5))
#hat(Y)=hat(B{0})+hat(B){1}{x}
four.model<-lm(y~x, data=ggdat)
summary(four.model)
summary(mod3b)
ggdat <- rbind(ggdat,     # original data
c(100,25)) # bad observation
four.model<-lm(y~x, data=ggdat)
summary(four.model)
ggplot.final <- ggplot %>%
mutate(plot1 = 5.2+(2.06*x))
ggdat.final <- ggdat %>%
mutate(plot1 = 5.2+(2.06*x))
ggdat.final <- ggdat %>%
mutate(plot1 = 5.2+(2.06*x),
plot2 = 10.742+(1.891*x))
ggdat.final <- ggdat %>%
mutate(plot1 = 5.2+(2.06*x),
plot2 = 10.742+(1.891*x))%>%
pivot_longer(cols=starts_with("plot"),
names_to="Plot",
values_to="Pred")
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(color=Plot)
ggdat.final <- ggdat %>%
mutate(plot1 = 5.2+(2.06*x),
plot2 = 10.742+(1.891*x))%>%
pivot_longer(cols=starts_with("plot"),
names_to="Plot",
values_to="Pred")
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(color=Plot)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot))
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="blue",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)
ggplot(ggdat.final, aes(x=x, y=y))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
ggdat.final <- ggdat %>%
mutate(beforeAdding = 5.2+(2.06*x),
afterAdding = 10.742+(1.891*x))%>%
pivot_longer(cols=ends_with("Adding"),
names_to="Plot",
values_to="Pred")
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
library(rcompanion)
install.packages("rcompanion")
library(rcompanion)
library(MASS)
??transformTukey
ggplot(ggdat, aes(x=x, y=y))+
geom_smooth(color="blue",
method="lm",
formula=y~x)+
geom_point(shape=1,
alpha=.3)+
theme_bw()
plotResiduals(ggdat)
#not stealing your function, prof. c:
plotResiduals<-function(mod){
ggdat <- data.frame(y.hat = fitted(mod),
e = residuals(mod))
########################################
####  Fitted versus residuals
########################################
p1<-ggplot(data=ggdat,aes(x=y.hat,y=e))+
geom_point(shape=1)+
geom_hline(yintercept=0,linetype="dashed")+
theme_bw()+
xlab(bquote(hat(Y)))+
ylab("Residuals")+
ggtitle("Fitted Values versus the Residuals")
########################################
####  Histogram with Gaussian Density
########################################
ggdat.gaussian<-data.frame(x=seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
f=dnorm(seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
#ei should have mean zero
mean=0,
#ei should have common variance
sd=summary(mod)$sigma),
CDF=pnorm(seq(min(ggdat$e)-sd(ggdat$e),
max(ggdat$e)+sd(ggdat$e),length.out = 500),
#ei should have mean zero
mean=0,
#ei should have common variance
sd=summary(mod)$sigma))
d<-density(ggdat$e)
p2<-ggplot(data=ggdat,aes(x=e))+
geom_histogram(aes(y=..density..), binwidth = d$bw,
fill="lightblue",color="black")+
geom_density(aes(color="Empirical"),size=1,
trim=F,show.legend = F)+
geom_line(data=ggdat.gaussian,aes(x=x,y=f,color="Gaussian-Assumed"),
size=1)+
theme_bw()+
xlab("Residual")+
ylab("Density")+
labs(color = "")+
theme(legend.position="bottom")+
ggtitle("Residual Density")
########################################
####  Plot the residuals ecdf
########################################
e.cdf.func<-ecdf(ggdat$e)
e.cdf<-e.cdf.func(sort(ggdat$e))
ggdat<-ggdat %>% mutate(e.sort=sort(ggdat$e),
e.cdf=e.cdf)
p3<-ggplot(data=ggdat,aes(x=e.sort))+
geom_line(data=ggdat.gaussian,aes(x=x,y=CDF,color="Gaussian-Assumed"),size=1)+
geom_step(aes(y=e.cdf,color="Empirical"),show.legend = F,size=1)+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Residual")+
ylab("Cumulative Density")+
labs(color = "")+
theme(legend.position="bottom")+
ggtitle("Residual Cumulative Density")
########################################
####  QQplot of the residuals
########################################
library("qqplotr")
p4<-ggplot(data=ggdat,aes(sample=scale(e)))+ #standardize e
stat_qq_band(alpha=0.25) +
stat_qq_line() +
stat_qq_point() +
theme_bw()+
xlab("Gaussian Quantiles")+
ylab("Sample Quantiles")+
ggtitle("Normal Quantile-Quantile Plot of Residuals")
########################################
####  Print
########################################
(p1|p4)/(p2|p3)
}
library(patchwork)
plotResiduals(ggdat)
ggdat <- rbind(ggdat,     # original data
c(100,25)) # bad observation
plotResiduals(ggdat)
#there is one unusually small observation!
four.model<-lm(y~x, data=ggdat)
plotResiduals(four.model)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(group=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
four.model.r <- rlm(y~x, data=ggdat)
summary(four.model.r)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=c("Blue, Black")),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
ggplot(ggdat.final, aes(x=x, y=Pred))+
geom_smooth(aes(color=Plot),
method="lm",
formula=y~x)+
geom_point(aes(y=y), shape=1,
alpha=.3)
